package databaseHandler

import (
	"fmt"
	"time"

	"github.com/asdine/storm"
	"github.com/bwmarrin/discordgo"
)

type MessageAttachment struct {
	ID       string `storm:"index"`
	URL      string
	ProxyURL string
	Filename string
}

type User struct {
	ID            string `storm:"index"` // The ID of the user.
	Username      string // The user's username.
	Avatar        string // The hash of the user's avatar. Use Session.UserAvatar to retrieve the avatar itself.
	Locale        string // The user's chosen language option.
	Discriminator string // The discriminator of the user (4 numbers after name).
	Verified      bool   // Whether the user's email is verified.
	MFAEnabled    bool   // Whether the user has multi-factor authentication enabled.
	Bot           bool   // Whether the user is a bot.
}

type MentionUser struct {
	ID string `storm:"index"` // The ID of the user.
}

type Message struct {
	CreatedTime     time.Time             `storm:"inline"`
	ID              string                `storm:"unique, index"` // The ID of the message.
	ChannelID       string                // The ID of the channel in which the message was sent.
	GuildID         string                // The ID of the guild in which the message was sent.
	MentionRoles    []string              // The roles mentioned in the message.
	Tts             bool                  // Whether the message is text-to-speech.
	MentionEveryone bool                  // Whether the message mentions everyone.
	AuthorID        string                // The id of the author of the message.
	Attachments     []MessageAttachment   `storm:"inline"` // A list of attachments present in the message.
	Mentions        []string              // A list of users mentioned in the message.
	Type            discordgo.MessageType `storm:"inline"` // The type of the message.
	WebhookID       string                // The webhook ID of the message, if it was generated by a webhook
}

type Member struct {
	GuildID  string    // The guild ID on which the member exists.
	JoinedAt time.Time `storm:"inline"` // The time at which the member joined the guild
	Nick     string    // The nickname of the member, if they have one.
	User     *User     `storm:"inline"` // The underlying user on which the member is based.
	Roles    []string  // A list of IDs of the roles which are possessed by the member.
}
type GuildData struct {
	DataMessages map[string]Message `storm:"inline"`
	Members      map[string]Member  `storm:"inline"`
}
type GuildStats struct {
	TotalMessages int // Messages all time
	MessagesTD    int // Messages this day (last 24h)
	MessagesTM    int // Messages this month (last 30 days)
	MessagesTH    int // Messages this hour (last 60 minutes)
	MessagesTm    int // Messages this minute (last 60 seconds)

	TotalMembers int // Members all time
	MembersTD    int // Members this day (last 24h)
	MembersTM    int // Members this month (last 30 days)
	MembersTH    int // Members this hour (last 60 minutes)
	MembersTm    int // Members this minute (last 60 seconds)
}
type Guild struct {
	ID    string     `storm:"unique"` // Guild ID
	Data  GuildData  `storm:"inline"`
	Stats GuildStats `storm:"inline"`
}

var (
	db  *storm.DB
	err error
)

func init() {
	db, err = storm.Open("database.db")
	if err != nil {
		fmt.Println(err)
	}

	addUser(db)
	fmt.Println("Added user")

	//defer db.Close()
}

func addUser(db *storm.DB) {
	user := User{
		ID:        1,
		Group:     "staff",
		Email:     "bailey@provider.com",
		Name:      "bailey",
		Age:       16,
		CreatedAt: time.Now(),
	}

	err = db.Save(&user)
	if err != nil {
		fmt.Println(err)
	}
	// err == nil
}

func GetGuilds() []User {
	var users []User
	err = db.All(&users)
	return users
}

func GetPerson(id int) User {
	var user User
	err = db.One("ID", id, &user)
	if err != nil {
		fmt.Println(err)
	}
	return user
}

func addGuild(g *discordgo.GuildCreate) error {
	DataMessages := make(map[string]Message)
	Members := make(map[string]Member)

	for _, member := range g.Members {
		JoinedAt, _ := member.JoinedAt.Parse()
		Members[member.User.ID] = Member{
			member.GuildID, // The guild ID on which the member exists.
			JoinedAt,       // The time at which the member joined the guild
			member.Nick,    // The nickname of the member, if they have one.
			&User{
				member.User.ID,
				member.User.Username,
				member.User.Avatar,
				member.User.Locale,
				member.User.Discriminator,
				member.User.Verified,
				member.User.MFAEnabled,
				member.User.Bot,
			},
			member.Roles, // A list of IDs of the roles which are possessed by the member.
		}
	}

	guildData := GuildData{
		DataMessages,
		Members,
	}

	guildStats := GuildStats{
		0, // Messages all time
		0, // Messages this day (last 24h)
		0, // Messages this month (last 30 days)
		0, // Messages this hour (last 60 minutes)
		0, // Messages this minute (last 60 seconds)

		g.MemberCount, // Members all time
		0,             // Members this day (last 24h)
		0,             // Members this month (last 30 days)
		0,             // Members this hour (last 60 minutes)
		0,             // Members this minute (last 60 seconds)
	}

	guild := Guild{
		g.ID,
		guildData,
		guildStats,
	}

	err = db.Save(&guild)
	if err != nil {
		fmt.Println(err)
	}

	return nil
}

func GuildLeave(g *discordgo.GuildDelete) error {
	err := deleteGuild(g.ID)
	if err != nil {
		return err
	}
	return nil
}
